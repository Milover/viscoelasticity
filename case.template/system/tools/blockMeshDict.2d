/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2106                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system/tools";
    object      blockMeshDict.2d;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#message "Using 2D mesh config";

// axial cell expansion ratio, inlet/outlet
exR_Z	1.01;
// radial cell expansion ratio
exR_R	1.01;

// No. cells inlet/outlet in axial dir.
ncL		#eval{ round(log(1 - $L*(1 - $exR_Z)/(2*$b/$:ncZ) ) / log($exR_Z)) };

// inlet cell exp. ratio in axial dir.
grZ_o	#eval{ pow($exR_Z, $ncL - 1) };
// outlet cell exp. ratio in axial dir.
grZ_i	#eval{ 1/$grZ_o };
// radial cell exp. ratio
grR	    #eval{ pow($exR_R, 1 - $:ncR) };

// wedge half-angle
ang		2.5;
sAng    #eval{ sin(degToRad($ang)) };
cAng    #eval{ cos(degToRad($ang)) };

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

merge       points;

scale		1;

vertices
(
	#eval{vector(      -$b,         0,            0)}		// 0
	#eval{vector(       $b,         0,            0)}		// 1
	#eval{vector(       $b,  $cAng*$R,    -$sAng*$R)}		// 2
	#eval{vector(      -$b,  $cAng*$R,    -$sAng*$R)}		// 3

	#eval{vector(       $b,  $cAng*$R,     $sAng*$R)}		// 4
	#eval{vector(      -$b,  $cAng*$R,     $sAng*$R)}		// 5

	#eval{vector( -$b - $L,         0,            0)}		// 6
	#eval{vector( -$b - $L,  $cAng*$R,    -$sAng*$R)}		// 7
	#eval{vector( -$b - $L,  $cAng*$R,     $sAng*$R)}		// 8

	#eval{vector(  $b + $L,         0,            0)}		// 9
	#eval{vector(  $b + $L,  $cAng*$R,    -$sAng*$R)}		// 10
	#eval{vector(  $b + $L,  $cAng*$R,     $sAng*$R)}		// 11
);

blocks
(
	hex (0 1 2 3 0 1 4 5)   ($:ncZ $:ncR 1) simpleGrading (1      $grR 1)
	hex (6 0 3 7 6 0 5 8)   ($ncL $:ncR 1)  simpleGrading ($grZ_i $grR 1)
	hex (1 9 10 2 1 9 11 4) ($ncL $:ncR 1)  simpleGrading ($grZ_o $grR 1)
);

edges
(
	line   0 1
	line   1 2
	spline 2 3
	(
		#eval{vector(      $b,                                   $cAng*$R,                                   -$sAng*$R)}

		#eval{vector(  0.9*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.9*pi()))), -$sAng*($R - 0.5*$a * (1 + cos( 0.9*pi()))))}
		#eval{vector(  0.8*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.8*pi()))), -$sAng*($R - 0.5*$a * (1 + cos( 0.8*pi()))))}
		#eval{vector(  0.7*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.7*pi()))), -$sAng*($R - 0.5*$a * (1 + cos( 0.7*pi()))))}
		#eval{vector(  0.6*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.6*pi()))), -$sAng*($R - 0.5*$a * (1 + cos( 0.6*pi()))))}
		#eval{vector(  0.5*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.5*pi()))), -$sAng*($R - 0.5*$a * (1 + cos( 0.5*pi()))))}
		#eval{vector(  0.4*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.4*pi()))), -$sAng*($R - 0.5*$a * (1 + cos( 0.4*pi()))))}
		#eval{vector(  0.3*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.3*pi()))), -$sAng*($R - 0.5*$a * (1 + cos( 0.3*pi()))))}
		#eval{vector(  0.2*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.2*pi()))), -$sAng*($R - 0.5*$a * (1 + cos( 0.2*pi()))))}
		#eval{vector(  0.1*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.1*pi()))), -$sAng*($R - 0.5*$a * (1 + cos( 0.1*pi()))))}

		#eval{vector(       0,                           $cAng*($R - $a),                             -$sAng*($R - $a))}

		#eval{vector( -0.1*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.1*pi()))), -$sAng*($R - 0.5*$a * (1 + cos(-0.1*pi()))))}
		#eval{vector( -0.2*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.2*pi()))), -$sAng*($R - 0.5*$a * (1 + cos(-0.2*pi()))))}
		#eval{vector( -0.3*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.3*pi()))), -$sAng*($R - 0.5*$a * (1 + cos(-0.3*pi()))))}
		#eval{vector( -0.4*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.4*pi()))), -$sAng*($R - 0.5*$a * (1 + cos(-0.4*pi()))))}
		#eval{vector( -0.5*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.5*pi()))), -$sAng*($R - 0.5*$a * (1 + cos(-0.5*pi()))))}
		#eval{vector( -0.6*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.6*pi()))), -$sAng*($R - 0.5*$a * (1 + cos(-0.6*pi()))))}
		#eval{vector( -0.7*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.7*pi()))), -$sAng*($R - 0.5*$a * (1 + cos(-0.7*pi()))))}
		#eval{vector( -0.8*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.8*pi()))), -$sAng*($R - 0.5*$a * (1 + cos(-0.8*pi()))))}
		#eval{vector( -0.9*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.9*pi()))), -$sAng*($R - 0.5*$a * (1 + cos(-0.9*pi()))))}

		#eval{vector(     -$b,                                   $cAng*$R,                                   -$sAng*$R)}
	)
	line   3 0

	line   1 4
	spline 4 5
	(
		#eval{vector(      $b,                                   $cAng*$R,                                    $sAng*$R)}

		#eval{vector(  0.9*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.9*pi()))),  $sAng*($R - 0.5*$a * (1 + cos( 0.9*pi()))))}
		#eval{vector(  0.8*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.8*pi()))),  $sAng*($R - 0.5*$a * (1 + cos( 0.8*pi()))))}
		#eval{vector(  0.7*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.7*pi()))),  $sAng*($R - 0.5*$a * (1 + cos( 0.7*pi()))))}
		#eval{vector(  0.6*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.6*pi()))),  $sAng*($R - 0.5*$a * (1 + cos( 0.6*pi()))))}
		#eval{vector(  0.5*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.5*pi()))),  $sAng*($R - 0.5*$a * (1 + cos( 0.5*pi()))))}
		#eval{vector(  0.4*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.4*pi()))),  $sAng*($R - 0.5*$a * (1 + cos( 0.4*pi()))))}
		#eval{vector(  0.3*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.3*pi()))),  $sAng*($R - 0.5*$a * (1 + cos( 0.3*pi()))))}
		#eval{vector(  0.2*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.2*pi()))),  $sAng*($R - 0.5*$a * (1 + cos( 0.2*pi()))))}
		#eval{vector(  0.1*$b, $cAng*($R - 0.5*$a * (1 + cos( 0.1*pi()))),  $sAng*($R - 0.5*$a * (1 + cos( 0.1*pi()))))}

		#eval{vector(       0,                           $cAng*($R - $a),                              $sAng*($R - $a))}

		#eval{vector( -0.1*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.1*pi()))),  $sAng*($R - 0.5*$a * (1 + cos(-0.1*pi()))))}
		#eval{vector( -0.2*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.2*pi()))),  $sAng*($R - 0.5*$a * (1 + cos(-0.2*pi()))))}
		#eval{vector( -0.3*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.3*pi()))),  $sAng*($R - 0.5*$a * (1 + cos(-0.3*pi()))))}
		#eval{vector( -0.4*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.4*pi()))),  $sAng*($R - 0.5*$a * (1 + cos(-0.4*pi()))))}
		#eval{vector( -0.5*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.5*pi()))),  $sAng*($R - 0.5*$a * (1 + cos(-0.5*pi()))))}
		#eval{vector( -0.6*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.6*pi()))),  $sAng*($R - 0.5*$a * (1 + cos(-0.6*pi()))))}
		#eval{vector( -0.7*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.7*pi()))),  $sAng*($R - 0.5*$a * (1 + cos(-0.7*pi()))))}
		#eval{vector( -0.8*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.8*pi()))),  $sAng*($R - 0.5*$a * (1 + cos(-0.8*pi()))))}
		#eval{vector( -0.9*$b, $cAng*($R - 0.5*$a * (1 + cos(-0.9*pi()))),  $sAng*($R - 0.5*$a * (1 + cos(-0.9*pi()))))}

		#eval{vector(     -$b,                                   $cAng*$R,                                    $sAng*$R)}
	)
	line   5 0

	line   2 4
	line   3 5

	line   6 0
	line   3 7
	line   7 6

	line   5 8
	line   8 6

	line   7 8

	line   9 10
	line   10 2

	line   1 9
	line   9 11
	line   11 4

	line   10 11
);

boundary
(
	inlet
	{
		type	patch;
		faces
		(
			( 6 8 7 6 )
		);
	}

	outlet
	{
		type	patch;
		faces
		(
			( 9 10 11 9 )
		);
	}

	wall.inlet
	{
		type	wall;
		faces
		(
			( 3 7 8 5 )
		);
	}

	wall.stenosis
	{
		type	wall;
		faces
		(
			( 2 3 5 4 )
		);
	}

	wall.outlet
	{
		type	wall;
		faces
		(
			( 2 4 11 10 )
		);
	}

	empty.axis
	{
		type	empty;
		faces
		(
			( 0 0 6 6 )
			( 0 1 1 0 )
			( 1 9 9 1 )
		);
	}

	wedge.0
	{
		type	wedge;
		faces
		(
			( 0 6  7 3 )
			( 0 3  2 1 )
			( 1 2 10 9 )
		);
	}

	wedge.1
	{
		type	wedge;
		faces
		(
			( 0 5  8 6 )
			( 0 1  4 5 )
			( 1 9 11 4 )
		);
	}
);

mergePatchPairs
(
);

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#inputMode merge

// ************************************************************************* //
