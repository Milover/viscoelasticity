/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2106                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include	"<constant>/caseSetup"

zMax    0.5;

exR_L	1.01;					// cell expansion ratio inlet/outlet, x-axis
exR_y	1.01;					// cell expansion ratio, y-axis

ncX		300;					// No. cells (stenosis), x-axis
ncY		80;						// No. cells, y-axis
// No. cells inlet/outlet, x-axis
ncL		#eval{ round(log(1 - $L*(1 - $exR_L)/(2*$b/$ncX) ) / log($exR_L)) };

grX_o	#eval{ pow($exR_L, $ncL - 1) };	// inlet cell exp. ratio
grX_i	#eval{ 1/$grX_o };				// outlet cell exp. ratio
grY	    #eval{ pow($exR_y, 1 - $ncY) };	// radial cell exp. ratio

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale		1;

vertices
(
	#eval{vector(      -$b,   0, -$zMax)}		// 0
	#eval{vector(       $b,   0, -$zMax)}		// 1
	#eval{vector(       $b,  $R, -$zMax)}		// 2
	#eval{vector(      -$b,  $R, -$zMax)}		// 3

	#eval{vector(      -$b,   0,  $zMax)}		// 4
	#eval{vector(       $b,   0,  $zMax)}		// 5
	#eval{vector(       $b,  $R,  $zMax)}		// 6
	#eval{vector(      -$b,  $R,  $zMax)}		// 7

	#eval{vector( -$b - $L,   0, -$zMax)}		// 8
	#eval{vector( -$b - $L,  $R, -$zMax)}		// 9
	#eval{vector( -$b - $L,   0,  $zMax)}		// 10
	#eval{vector( -$b - $L,  $R,  $zMax)}		// 11

	#eval{vector(  $b + $L,   0, -$zMax)}		// 12
	#eval{vector(  $b + $L,  $R, -$zMax)}		// 13
	#eval{vector(  $b + $L,   0,  $zMax)}		// 14
	#eval{vector(  $b + $L,  $R,  $zMax)}		// 15
);

blocks
(
	hex (0 1 2 3 4 5 6 7)     ($ncX $ncY 1) simpleGrading (1      $grY 1)
	hex (8 0 3 9 10 4 7 11)   ($ncL $ncY 1) simpleGrading ($grX_i $grY 1)
	hex (1 12 13 2 5 14 15 6) ($ncL $ncY 1) simpleGrading ($grX_o $grY 1)
);

edges
(
	line   0 1
	line   1 2
	spline 2 3
	(
		#eval{vector(      $b,                                  $R, -$zMax)}

		#eval{vector(  0.9*$b,  $R - 0.5*$a * (1 + cos( 0.9*pi())), -$zMax)}
		#eval{vector(  0.8*$b,  $R - 0.5*$a * (1 + cos( 0.8*pi())), -$zMax)}
		#eval{vector(  0.7*$b,  $R - 0.5*$a * (1 + cos( 0.7*pi())), -$zMax)}
		#eval{vector(  0.6*$b,  $R - 0.5*$a * (1 + cos( 0.6*pi())), -$zMax)}
		#eval{vector(  0.5*$b,  $R - 0.5*$a * (1 + cos( 0.5*pi())), -$zMax)}
		#eval{vector(  0.4*$b,  $R - 0.5*$a * (1 + cos( 0.4*pi())), -$zMax)}
		#eval{vector(  0.3*$b,  $R - 0.5*$a * (1 + cos( 0.3*pi())), -$zMax)}
		#eval{vector(  0.2*$b,  $R - 0.5*$a * (1 + cos( 0.2*pi())), -$zMax)}
		#eval{vector(  0.1*$b,  $R - 0.5*$a * (1 + cos( 0.1*pi())), -$zMax)}

		#eval{vector(       0,                             $R - $a, -$zMax)}

		#eval{vector( -0.1*$b,  $R - 0.5*$a * (1 + cos(-0.1*pi())), -$zMax)}
		#eval{vector( -0.2*$b,  $R - 0.5*$a * (1 + cos(-0.2*pi())), -$zMax)}
		#eval{vector( -0.3*$b,  $R - 0.5*$a * (1 + cos(-0.3*pi())), -$zMax)}
		#eval{vector( -0.4*$b,  $R - 0.5*$a * (1 + cos(-0.4*pi())), -$zMax)}
		#eval{vector( -0.5*$b,  $R - 0.5*$a * (1 + cos(-0.5*pi())), -$zMax)}
		#eval{vector( -0.6*$b,  $R - 0.5*$a * (1 + cos(-0.6*pi())), -$zMax)}
		#eval{vector( -0.7*$b,  $R - 0.5*$a * (1 + cos(-0.7*pi())), -$zMax)}
		#eval{vector( -0.8*$b,  $R - 0.5*$a * (1 + cos(-0.8*pi())), -$zMax)}
		#eval{vector( -0.9*$b,  $R - 0.5*$a * (1 + cos(-0.9*pi())), -$zMax)}

		#eval{vector(     -$b,                                  $R, -$zMax)}
	)
	line   3 0

	line   4 5
	line   5 6
	spline 6 7
	(
		#eval{vector(      $b,                                  $R,  $zMax)}

		#eval{vector(  0.9*$b,  $R - 0.5*$a * (1 + cos( 0.9*pi())),  $zMax)}
		#eval{vector(  0.8*$b,  $R - 0.5*$a * (1 + cos( 0.8*pi())),  $zMax)}
		#eval{vector(  0.7*$b,  $R - 0.5*$a * (1 + cos( 0.7*pi())),  $zMax)}
		#eval{vector(  0.6*$b,  $R - 0.5*$a * (1 + cos( 0.6*pi())),  $zMax)}
		#eval{vector(  0.5*$b,  $R - 0.5*$a * (1 + cos( 0.5*pi())),  $zMax)}
		#eval{vector(  0.4*$b,  $R - 0.5*$a * (1 + cos( 0.4*pi())),  $zMax)}
		#eval{vector(  0.3*$b,  $R - 0.5*$a * (1 + cos( 0.3*pi())),  $zMax)}
		#eval{vector(  0.2*$b,  $R - 0.5*$a * (1 + cos( 0.2*pi())),  $zMax)}
		#eval{vector(  0.1*$b,  $R - 0.5*$a * (1 + cos( 0.1*pi())),  $zMax)}

		#eval{vector(       0,                             $R - $a,  $zMax)}

		#eval{vector( -0.1*$b,  $R - 0.5*$a * (1 + cos(-0.1*pi())),  $zMax)}
		#eval{vector( -0.2*$b,  $R - 0.5*$a * (1 + cos(-0.2*pi())),  $zMax)}
		#eval{vector( -0.3*$b,  $R - 0.5*$a * (1 + cos(-0.3*pi())),  $zMax)}
		#eval{vector( -0.4*$b,  $R - 0.5*$a * (1 + cos(-0.4*pi())),  $zMax)}
		#eval{vector( -0.5*$b,  $R - 0.5*$a * (1 + cos(-0.5*pi())),  $zMax)}
		#eval{vector( -0.6*$b,  $R - 0.5*$a * (1 + cos(-0.6*pi())),  $zMax)}
		#eval{vector( -0.7*$b,  $R - 0.5*$a * (1 + cos(-0.7*pi())),  $zMax)}
		#eval{vector( -0.8*$b,  $R - 0.5*$a * (1 + cos(-0.8*pi())),  $zMax)}
		#eval{vector( -0.9*$b,  $R - 0.5*$a * (1 + cos(-0.9*pi())),  $zMax)}

		#eval{vector(     -$b,                                  $R,  $zMax)}
	)
	line   7 4

	line   0 4
	line   1 5
	line   2 6
	line   3 7

	line   8 0
	line   3 9
	line   9 8

	line   10 4
	line   7 11
	line   11 10

	line   8 10
	line   9 11

	line   1 12
	line   12 13
	line   13 2

	line   5 14
	line   14 15
	line   15 6

	line   12 14
	line   13 15
);

boundary
(
	inlet
	{
		type	patch;
		faces
		(
			( 8 10 11 9)
		);
	}

	outlet
	{
		type	patch;
		faces
		(
			( 12 13 15 14)
		);
	}

	wall.inlet
	{
		type	wall;
		faces
		(
			( 3 9 11 7 )
		);
	}

	wall.stenosis
	{
		type	wall;
		faces
		(
			( 2 3 7 6 )
		);
	}

	wall.outlet
	{
		type	wall;
		faces
		(
			( 2 6 15 13 )
		);
	}

	symmetry.patch
	{
		type	symmetry;
		faces
		(
			( 0 4 10 8 )
			( 0 1 5 4 )
			( 1 12 14 5 )
		);
	}

	empty.patch
	{
		type	empty;
		faces
		(
			( 0 8 9 3 )
			( 4 7 11 10 )

			( 0 3 2 1 )
			( 4 5 6 7 )

			( 1 2 13 12 )
			( 5 14 15 6 )
		);
	}
);

mergePatchPairs
(
);

// ************************************************************************* //
